  const [value1, setValue1] = useState('');
  const [symbol, setSymbol] = useState('');
  const [value2, setValue2] = useState('');
  const [currentInput, setCurrentInput] = useState('');
  const [history, setHistory] = useState([]);
  const [showHelpModal, setShowHelpModal] = useState(false);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    category: '',
    description: '',
  });
  const [submitDisabled, setSubmitDisabled] = useState(true);

  const handleButtonClick = (value: string) => {
    setCurrentInput((prevInput) => prevInput + value);
  };

  const handleClearButtonClick = () => {
    setValue1('');
    setSymbol('');
    setValue2('');
    setCurrentInput('');
  };

  const handleDeleteButtonClick = () => {
    setCurrentInput((prevInput) => prevInput.slice(0, -1));
  };

  const handleSymbolButtonClick = (newSymbol: string) => {
    if (value1 !== '' && symbol === '' && /[0-9]$/.test(currentInput)) {
      setSymbol(newSymbol);
      setCurrentInput((prevInput) => setValue1(prevInput));
    }
  };

  const handleEqualButtonClick = () => {
    try {
      if (value1 !== '' && symbol !== '' && /[0-9]$/.test(currentInput)) {
        setValue2(currentInput.replace(value1 + symbol, ''));
        const result = eval(`${value1} ${symbol} ${value2}`);
        setHistory((prevHistory) => [...prevHistory, `${value1} ${symbol} ${value2} = ${result}`]);
        setValue1(result.toString());
        setSymbol('');
        setValue2('');
        setCurrentInput(result.toString());
      }
    } catch (error) {
      setCurrentInput('Error');
    }
  };

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Perform submission logic here
    console.log('Form submitted:', formData);

    // Reset form data and disable the submit button
    setFormData({
      firstName: '',
      lastName: '',
      email: '',
      category: '',
      description: '',
    });

    // Disable the submit button
    setSubmitDisabled(true);

    // Close the modal
    setShowHelpModal(false);
  };

  const showHelp = () => {
    setShowHelpModal(true);
  };

  const closeHelpModal = () => {
    setShowHelpModal(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));

    // Check if all required fields are filled
    const areFilled =
      formData.firstName !== '' &&
      formData.lastName !== '' &&
      formData.email !== '' &&
      formData.category !== '';
    setSubmitDisabled(!areFilled);
  };













  const [value1, setValue1] = useState('');
  const [symbol, setSymbol] = useState('');
  const [value2, setValue2] = useState('');
  const [currentInput, setCurrentInput] = useState('');
  const [history, setHistory] = useState([]);

  const handleButtonClick = (value: string) => {
    setCurrentInput((prevInput) => prevInput + value);
  };

  const handleClearButtonClick = () => {
    setValue1('');
    setSymbol('');
    setValue2('');
    setCurrentInput('');
  };

  const handleDeleteButtonClick = () => {
    setCurrentInput((prevInput) => prevInput.slice(0, -1));
  };

  const handleSymbolButtonClick = (newSymbol: React.SetStateAction<string>) => {
    if (value1 !== '' && symbol === '' && /[0-9]$/.test(currentInput)) {
      setSymbol(newSymbol);
      setCurrentInput((prevInput) => setValue1(prevInput));
    }
  };

  const handleEqualButtonClick = () => {
    try {
      if (value1 !== '' && symbol !== '' && /[0-9]$/.test(currentInput)) {
        setValue2(currentInput.replace(value1 + symbol, ''));
        const result = eval(`${value1} ${symbol} ${value2}`);
        setHistory((prevHistory) => [...prevHistory, `${value1} ${symbol} ${value2} = ${result}`]);
        setValue1(result.toString());
        setSymbol('');
        setValue2('');
        setCurrentInput(result.toString());
      }
    } catch (error) {
      setCurrentInput('Error');
    }
  };

  const [showHelpModal, setShowHelpModal] = useState(false);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    category: '',
    description: '',
  });

  // Helper function to check if all required fields are filled
  const areRequiredFieldsFilled = () => {
    return formData.firstName !== '' && formData.lastName !== '' && formData.email !== '' && formData.category !== '';
  };

  // Function to handle form submission
  const handleFormSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
    
    setShowHelpModal(false);
  };

  const showHelp = () => {
    setShowHelpModal(true);
  };

  const closeHelpModal = () => {
    setShowHelpModal(false);
  };

  const handleInputChange = (e: { target: { name: any; value: any; }; }) => {
    const { name, value } = e.target;
    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));
  };











  const [value1, setValue1] = useState('');
  const [symbol, setSymbol] = useState('');
  const [value2, setValue2] = useState('');
  const [currentInput, setCurrentInput] = useState('');
  const [history, setHistory] = useState([]);
  const [showHelpModal, setShowHelpModal] = useState(false);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    category: '',
    description: '',
  });
  const [submitDisabled, setSubmitDisabled] = useState(true);

  const handleButtonClick = (value: string) => {
    setCurrentInput((prevInput) => prevInput + value);
  };

  const handleClearButtonClick = () => {
    setValue1('');
    setSymbol('');
    setValue2('');
    setCurrentInput('');
  };

  const handleDeleteButtonClick = () => {
    setCurrentInput((prevInput) => prevInput.slice(0, -1));
  };

  const handleSymbolButtonClick = (newSymbol: string) => {
    if (value1 !== '' && symbol === '' && /[0-9]$/.test(currentInput)) {
      setSymbol(newSymbol);
      setCurrentInput((prevInput) => setValue1(prevInput));
    }
  };

  const handleEqualButtonClick = () => {
    try {
      if (value1 !== '' && symbol !== '' && /[0-9]$/.test(currentInput)) {
        setValue2(currentInput.replace(value1 + symbol, ''));
        const result = eval(`${value1} ${symbol} ${value2}`);
        setHistory((prevHistory) => [...prevHistory, `${value1} ${symbol} ${value2} = ${result}`]);
        setValue1(result.toString());
        setSymbol('');
        setValue2('');
        setCurrentInput(result.toString());
      }
    } catch (error) {
      setCurrentInput('Error');
    }
  };

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Perform submission logic here
    console.log('Form submitted:', formData);

    // Reset form data and disable the submit button
    setFormData({
      firstName: '',
      lastName: '',
      email: '',
      category: '',
      description: '',
    });

    // Disable the submit button
    setSubmitDisabled(true);

    // Close the modal
    setShowHelpModal(false);
  };

  const showHelp = () => {
    setShowHelpModal(true);
  };

  const closeHelpModal = () => {
    setShowHelpModal(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    console.log('Event:', e);
    console.log('Name:', name);
    console.log('Value:', value);
    console.log('Type:', type);
  
    // For radio buttons, set the value directly without modifying it
    setFormData((prevFormData) => ({ ...prevFormData, [name]: type === 'radio' ? value : value }));
  
    // Check if the category is filled
    const isCategoryFilled = formData.category.trim() !== '';
  
    // Check if all required fields (excluding the description) are filled
    const areFilled =
      isCategoryFilled &&
      formData.firstName.trim() !== '' &&
      formData.lastName.trim() !== '' &&
      formData.email.trim() !== '';
  
    // Enable the submit button if all required fields are filled
    setSubmitDisabled(!areFilled);
  };